/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./api/context/index"
import type { RelayGlobalIdNexusFieldConfig } from "@jcm/nexus-plugin-relay-global-id"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * This will take relay global id as input and pass internal id to resolvers
     */
    relayId<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "RelayId";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * This will take relay global id as input and pass internal id to resolvers
     */
    relayId<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "RelayId";
    relayGlobalId<FieldName extends string>(
            fieldName: FieldName, 
            config: RelayGlobalIdNexusFieldConfig<TypeName, FieldName>
          ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  LoginInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  SignLoginSessionInput: { // input type
    loginSessionId: string; // ID!
  }
  SignupInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  WaitForSignedLoginSessionInput: { // input type
    loginSessionId: string; // ID!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  RelayId: any
}

export interface NexusGenObjects {
  GetLoginSessionPayload: { // root type
    loginSessionId: string; // ID!
  }
  LoginPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: {};
  Query: {};
  SignLoginSessionPayload: { // root type
    loginSessionId: string; // ID!
  }
  SignupPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Subscription: {};
  User: { // root type
    email: string; // String!
  }
  WaitForSignedLoginSessionPayload: { // root type
    loginSessionId: string; // ID!
    token: string; // String!
  }
}

export interface NexusGenInterfaces {
  Node: NexusGenRootTypes['User'];
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  GetLoginSessionPayload: { // field return type
    loginSessionId: string; // ID!
  }
  LoginPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: { // field return type
    getLoginSession: NexusGenRootTypes['GetLoginSessionPayload']; // GetLoginSessionPayload!
    login: NexusGenRootTypes['LoginPayload']; // LoginPayload!
    signLoginSession: NexusGenRootTypes['SignLoginSessionPayload']; // SignLoginSessionPayload!
    signup: NexusGenRootTypes['SignupPayload']; // SignupPayload!
  }
  Query: { // field return type
    node: NexusGenRootTypes['Node'] | null; // Node
    nodes: Array<NexusGenRootTypes['Node'] | null>; // [Node]!
  }
  SignLoginSessionPayload: { // field return type
    loginSessionId: string; // ID!
  }
  SignupPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Subscription: { // field return type
    waitForSignedLoginSession: NexusGenRootTypes['WaitForSignedLoginSessionPayload'] | null; // WaitForSignedLoginSessionPayload
  }
  User: { // field return type
    email: string; // String!
    id: string; // ID!
  }
  WaitForSignedLoginSessionPayload: { // field return type
    loginSessionId: string; // ID!
    token: string; // String!
  }
  Node: { // field return type
    id: string | null; // ID
  }
}

export interface NexusGenFieldTypeNames {
  GetLoginSessionPayload: { // field return type name
    loginSessionId: 'ID'
  }
  LoginPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Mutation: { // field return type name
    getLoginSession: 'GetLoginSessionPayload'
    login: 'LoginPayload'
    signLoginSession: 'SignLoginSessionPayload'
    signup: 'SignupPayload'
  }
  Query: { // field return type name
    node: 'Node'
    nodes: 'Node'
  }
  SignLoginSessionPayload: { // field return type name
    loginSessionId: 'ID'
  }
  SignupPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Subscription: { // field return type name
    waitForSignedLoginSession: 'WaitForSignedLoginSessionPayload'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
  }
  WaitForSignedLoginSessionPayload: { // field return type name
    loginSessionId: 'ID'
    token: 'String'
  }
  Node: { // field return type name
    id: 'ID'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    login: { // args
      input: NexusGenInputs['LoginInput']; // LoginInput!
    }
    signLoginSession: { // args
      input: NexusGenInputs['SignLoginSessionInput']; // SignLoginSessionInput!
    }
    signup: { // args
      input: NexusGenInputs['SignupInput']; // SignupInput!
    }
  }
  Query: {
    node: { // args
      id: string; // ID!
    }
    nodes: { // args
      ids: string[]; // [ID!]!
    }
  }
  Subscription: {
    waitForSignedLoginSession: { // args
      input: NexusGenInputs['WaitForSignedLoginSessionInput']; // WaitForSignedLoginSessionInput!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  Node: "User"
}

export interface NexusGenTypeInterfaces {
  User: "Node"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "Node";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}