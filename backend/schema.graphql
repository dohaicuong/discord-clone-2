### This file was generated by Nexus Schema
### Do not make changes to this file directly


type GetLoginSessionPayload {
  loginSessionId: ID!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginPayload {
  token: String!
  user: User!
}

type Mutation {
  getLoginSession: GetLoginSessionPayload!
  login(input: LoginInput!): LoginPayload!
  signLoginSession(input: SignLoginSessionInput!): SignLoginSessionPayload!
  signup(input: SignupInput!): SignupPayload!
}

"""An object with a global ID"""
interface Node {
  """The global ID of the object."""
  id: ID
}

type Query {
  """Fetches an object given its global ID"""
  node(
    """The global ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their global IDs"""
  nodes(
    """The global IDs of objects"""
    ids: [ID!]!
  ): [Node]!
}

"""
This will take relay global id as input and pass internal id to resolvers
"""
scalar RelayId

input SignLoginSessionInput {
  loginSessionId: ID!
}

type SignLoginSessionPayload {
  loginSessionId: ID!
}

input SignupInput {
  email: String!
  password: String!
}

type SignupPayload {
  token: String!
  user: User!
}

type Subscription {
  waitForSignedLoginSession(input: WaitForSignedLoginSessionInput!): WaitForSignedLoginSessionPayload
}

type User implements Node {
  email: String!
  id: ID!
}

input WaitForSignedLoginSessionInput {
  loginSessionId: ID!
}

type WaitForSignedLoginSessionPayload {
  loginSessionId: ID!
  token: String!
}
